# SPDX-License-Identifier: Apache-2.0
# Licensed to the Ed-Fi Alliance under one or more agreements.
# The Ed-Fi Alliance licenses this file to you under the Apache License, Version 2.0.
# See the LICENSE and NOTICES files in the project root for more information.

name: On Pre-Release
on:
  release:
    types:
      - prereleased

env:
  MANIFEST_FILE: "Ed-Fi-Kafka-Connect-sbom-create.spdx.json"  
  PACKAGE_NAME: "ed-fi-kafka-connect-transforms"
  REF: ${{ github.ref_name }}

permissions: read-all

jobs:
  pack:
    name: Build and Pack
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: pwsh
        working-directory: kafka/ed-fi-kafka-connect-transforms
    outputs:
      hash-code: ${{ steps.hash-code.outputs.hash-code }}
      dms-version: ${{ steps.versions.outputs.dms-v }}

    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          fetch-depth: 0

      - name: Set Version Numbers      
        id: versions
        working-directory: ./
        run: |
          Import-Module ./package-helpers.psm1
          Get-VersionNumber

      - name: Setup Java
        uses: actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9 # v4.2.1
        with: 
          java-version: '17'
          distribution: 'temurin'
  
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@d9c87d481d55275bb5441eef3fe0e46805f9ef70 # v3.5.0

      - name: Generate Gradle wrapper
        run: gradle wrapper        

      - name: Make gradlew executable
        run: chmod +x ./gradlew   

      - name: Build with Gradle
        run: |
          $packageVersion = "${{ steps.versions.outputs.dms-semver }}"  
          ./gradlew clean build -Pversion="${{ steps.versions.outputs.dms-semver }}"  
        
      - name: Generate hash for the jar file
        id: hash-code
        run: |
          "hash-code=$(sha256sum *.jar | base64 -w0)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Upload Packages as Artifacts
        if: success()
        uses: actions/upload-artifact@26f96dfa697d77e81fd5907df203aa23a56210a8 # v4.3.0
        with:
          name: ${{ env.PACKAGE_NAME }}
          path: ${{ github.workspace }}/kafka/ed-fi-kafka-connect-transforms/build/libs/*.jar
          if-no-files-found: error
          retention-days: 30

  sbom-create:
    name: Create SBOM
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: pwsh
    needs: pack
    permissions:
      actions: read
      contents: write
      attestations: write
      id-token: write
    outputs:
      sbom-hash-code: ${{ steps.sbom-hash-code.outputs.sbom-hash-code }}
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Get Artifacts
        uses: actions/download-artifact@6b208ae046db98c579e8a3aa621ab581ff575935 #v4.1.1
        with:
          name: ${{ env.PACKAGE_NAME }}

      - name: Generate SBOM
        uses: anchore/sbom-action@61119d458adab75f756bc0b9e4bde25725f86a7a
        with:
          format: 'spdx-json'
          output-file: ${{ env.PACKAGE_NAME }}-SBOM
          upload-release-assets: true
          upload-artifact: true

      - name: Generate hash code for SBOM
        id: sbom-hash-code
        shell: bash
        run: |
          # sha256sum returns "<hashcode>  <name of file". Split that and return only the <hashcode>.
          # sbom_hash=$(sha256sum ${{ github.workspace }}/${{ env.MANIFEST_FILE }} | awk '{split($0,a); print a[1]}')
          sbom_hash=$(sha256sum ${{ github.workspace }}/${{ env.PACKAGE_NAME }}-SBOM | awk '{split($0,a); print a[1]}')
          echo $sbom_hash
          echo "sbom-hash-code=$sbom_hash" >> $GITHUB_OUTPUT

      - name: Attest
        uses: actions/attest-sbom@67422f5511b7ff725f4dbd6fb9bd2cd925c65a8d
        with:
          subject-path: '${{ github.workspace }}/kafka/${{ env.PACKAGE_NAME }}'
          sbom-path: ${{ env.PACKAGE_NAME }}-SBOM          

  sbom-attach:
    name: Attach SBOM file
    runs-on: ubuntu-latest
    needs:
      - sbom-create
      - pack
    permissions:
      actions: read
      contents: write
    steps:
      - name: Download the SBOM
        uses: Ed-Fi-Alliance-OSS/slsa-github-generator/.github/actions/secure-download-artifact@main
        with:
          name: "${{ env.MANIFEST_FILE }}"
          path: ${{ env.MANIFEST_FILE }}
          sha256: "${{ needs.sbom-create.outputs.sbom-hash-code }}"

      - name: Attach to release
        shell: pwsh
        run: |
          $release = "${{ github.ref_name }}"
          $repo = "${{ github.repository }}"
          $token = "${{ secrets.GITHUB_TOKEN }}"
          $file = "${{ env.MANIFEST_FILE }}"
          $uploadName = "${{ env.PACKAGE_NAME }}-SBOM.zip"

          $url = "https://api.github.com/repos/$repo/releases/tags/$release"

          $gh_headers = @{
              "Accept"        = "application/vnd.github+json"
              "Authorization" = "Bearer $token"
          }

          $response = Invoke-RestMethod -Uri $url -Headers $gh_headers
          $releaseId = $response.id

          $url = "https://uploads.github.com/repos/$repo/releases/$releaseId/assets"

          Compress-Archive $file -DestinationPath $uploadName

          $gh_headers["Content-Type"] = "application/octet"
          Invoke-RestMethod -Method POST `
           -Uri "$($url)?name=$($uploadName)" `
            -Headers $gh_headers `
            -InFile $uploadName
